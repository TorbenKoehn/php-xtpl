{"name":"Php-xtpl","tagline":"A PHP Template System that uses HTML (or rather, XML) instead of a new template \"language\" you have to learn.","body":"# What is XTPL?\r\n\r\n\r\nXTPL is a **template system for PHP** that tries not to create new fancy language constructs or languages itself.\r\nXTPL uses **plain HTML tags** to trigger specific template functions, display variables, loop through arrays etc.\r\n\r\nIt is based on XML parsing and requires **strict XML templates**, but allows you to use any **HTML5** tag (or rather, **any** tag). While allowing that, it takes specific elements and enhances them with special functionality.\r\n\r\nYou can find a list of what can be done with these tags below.\r\n\r\nThis is **server-side processed, enhanced HTML**. It can do a lot of useful stuff.\r\n\r\nThe output you get is **PHTML** which you can include in PHP.\r\nPHTML is just **PHP with HTML**, which renders a dynamic, server-side processed HTML page.\r\n\r\n\r\n# What can it do right now?\r\n\r\nSome basic features work already. Many, many, many, many more will follow soon.\r\n\r\n\r\n## Blocks\r\n\r\nYou can define a block and let other blocks add or replace content in it.\r\nThis works recursively, this means that you can define blocks in a layout template, extend from that and just define the block contents.\r\nYou can also define blocks and then include the templates that specify the block content.\r\n\r\n**my-page.xtpl**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<xtpl>\r\n\r\n\t<html version=\"5\">\r\n\t    <head>\r\n\t        <title>XTPL is awesome!</title>\r\n\t\r\n\t        <block name=\"scripts\">\r\n\t            <script src=\"jquery.js\" />\r\n\t        </block>\r\n\t\r\n\t        <block name=\"styles\">\r\n\t            <link rel=\"stylesheet\" href=\"style.css\" />\r\n\t        </block>\r\n\t    </head>\r\n\t    <body>\r\n\t\r\n\t        <block name=\"content\">\r\n\t            I'm some placeholder content, I won't stay here.\r\n\t        </block>\r\n\t    </body>\r\n\t</html>\r\n\r\n\r\n\r\n\t<block name=\"scripts\" mode=\"append\">\r\n        <script src=\"bootstrap.js\" />\r\n    </block>\r\n\r\n    <block name=\"styles\" mode=\"prepend\">\r\n        <link rel=\"stylesheet\" href=\"bootstrap.css\" />\r\n    </block>\r\n\r\n    <block name=\"content\">\r\n\r\n        <h1>My current content</h1>\r\n        <p>\r\n            This might be some static or dynamic content, whatever you prefer.\r\n        </p>\r\n        \r\n        <p>\r\n        \tIt actually doesn't matter what's in here, you can include stuff, you can have sub-blocks and sub-sub-blocks, XTPL can handle all of it.\r\n        </p>\r\n\r\n    </block>\r\n\r\n</xtpl>\r\n```\r\n\r\n**Note**: *Indeed, you don't need to close script elements anymore.*\r\n\r\nThe resulting HTML will be this:\r\n\r\n```html\r\n<!doctype html>\r\n<html>\r\n    <head>\r\n        <title>XTPL is awesome!</title>\r\n\r\n        <script src=\"jquery.js\"></script>\r\n        <script src=\"bootstrap.js\"></script>\r\n\r\n        <link rel=\"stylesheet\" href=\"bootstrap.css\">\r\n        <link rel=\"stylesheet\" href=\"style.css\">\r\n    </head>\r\n    <body>\r\n\r\n        <h1>My current content</h1>\r\n        <p>\r\n            This might be some static or dynamic content, whatever you prefer.\r\n        </p>\r\n        \r\n        <p>\r\n        \tIt actually doesn't matter what's in here, you can include stuff, you can have sub-blocks and sub-sub-blocks, XTPL can handle all of it.\r\n        </p>\r\n\r\n    </body>\r\n</html>\r\n```\r\n\r\nNotice that the script block got appended, the style block got prepended and the content block replaced the previous content.\r\n\r\nThe target block is always the first block with its name that the parser finds, all other blocks will add to it (or not)\r\n\r\nPeople who played with Jade already should know this kind of template mechanism.\r\n\r\n\r\n## Extend\r\n\r\nTemplates can extend other templates. Again, if you're coming from Jade, you should already know the way it works.\r\nThis does nothing more than putting your current template DOM inside the extended template DOM, but allows for recursive block usage, global main-layouts and stuff like that.\r\n\r\nImagine you have a great main-layout\r\n\r\n**layout.xtpl**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<xtpl>\r\n\r\n\t<html version=\"5\">\r\n\t    <head>\r\n\t        <title>XTPL is awesome!</title>\r\n\t\r\n\t        <block name=\"scripts\">\r\n\t            <script src=\"jquery.js\" />\r\n\t        </block>\r\n\t\r\n\t        <block name=\"styles\">\r\n\t            <link rel=\"stylesheet\" href=\"style.css\" />\r\n\t        </block>\r\n\t    </head>\r\n\t    <body>\r\n\t\r\n\t        <block name=\"content\">\r\n\t            I'm some placeholder content, I won't stay here.\r\n\t        </block>\r\n\t    </body>\r\n\t</html>\r\n\r\n</xtpl>\r\n```\r\n\r\nand you render a template that extends it\r\n\r\n**my-page.xtpl**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<xtpl extends=\"layout\">\r\n\r\n    <block name=\"scripts\" mode=\"append\">\r\n        <script src=\"bootstrap.js\" />\r\n    </block>\r\n\r\n    <block name=\"styles\" mode=\"prepend\">\r\n        <link rel=\"stylesheet\" href=\"bootstrap.css\" />\r\n    </block>\r\n\r\n    <block name=\"content\">\r\n\r\n        <h1>My current content</h1>\r\n        <p>\r\n            This might be some static or dynamic content, whatever you prefer.\r\n        </p>\r\n        \r\n        <p>\r\n        \tIt actually doesn't matter what's in here, you can include stuff, you can have sub-blocks and sub-sub-blocks, XTPL can handle all of it.\r\n        </p>\r\n\r\n    </block>\r\n</xtpl>\r\n```\r\n\r\nThe resulting HTML will be this:\r\n\r\n```html\r\n<!doctype html>\r\n<html>\r\n    <head>\r\n        <title>XTPL is awesome!</title>\r\n\r\n        <script src=\"jquery.js\"></script>\r\n        <script src=\"bootstrap.js\"></script>\r\n\r\n        <link rel=\"stylesheet\" href=\"bootstrap.css\">\r\n        <link rel=\"stylesheet\" href=\"style.css\">\r\n    </head>\r\n    <body>\r\n\r\n        <h1>My current content</h1>\r\n        <p>\r\n            This might be some static or dynamic content, whatever you prefer.\r\n        </p>\r\n        \r\n        <p>\r\n        \tIt actually doesn't matter what's in here, you can include stuff, you can have sub-blocks and sub-sub-blocks, XTPL can handle all of it.\r\n        </p>\r\n\r\n    </body>\r\n</html>\r\n```\r\n\r\nThere actually is no programatic limitation on how many levels you can extend, how many blocks there are or anything like that.\r\nYou can extend layouts as many levels deep as you like, even in included XTPLs.\r\n\r\nJust try to avoid recursion\r\n\r\n**Note**: *No really, recursion will fuck everything up right now I guess.*\r\n\r\n## Includes\r\n\r\nInclude a sub-template. \r\nIn the sub-template you got access to the template variables as well as the attributes of the include-element.\r\n\r\n**my-page.xtpl**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<xtpl>\r\n\r\n    <body>\r\n\r\n\t\t<block name=\"page-header\" />\r\n        <header>\r\n\r\n            <include file=\"navigation\" orientation=\"vertical\" />\r\n            \r\n        </header>\r\n    </body>\r\n    \r\n</xtpl>\r\n```\r\n\r\n**navigaton.xtpl**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<xtpl>\r\n\r\n    <nav class=\"nav nav-[[orientation]]\">\r\n        <ul>\r\n            <li><a href=\"#home\">Home</a></li>\r\n            <li><a href=\"#about-me\">About me</a></li>\r\n            <li><a href=\"#blog\">Blog</a></li>\r\n            <li><a href=\"#portfolio\">Portfolio</a></li>\r\n        </ul>\r\n    </nav>\r\n    \r\n    <block name=\"page-header\">\r\n    \tMy Page Header\r\n    </block>\r\n    \r\n</xtpl>\r\n```\r\n\r\nTo use the `orientation` attribute in the included template (or any of its extended templates), you use `[[orientation]]` in any attribute or text node, take a look at the `class=\"\"` attribute of the `<nav>` element. This also works on templates, that the included template extended.\r\n`orientation` is just an example, you can use any attribute name or value you like (You could even load the value of the `file` attribute)\r\n\r\nThe interpolation with `[[attributeName]]` works on attribute values and plain text nodes.\r\n\r\n\r\n## Variables\r\n\r\nWhat else, one of the most important parts.\r\nThere are two ways to use variables inside templates, there is a `<var>` element and you can use interpolation.\r\n\r\n### The `<var>` element\r\n\r\n```xml\r\n    <var name=\"my.variable.name\" />\r\n```\r\n\r\nis the same as\r\n\r\n```php\r\n    <?php echo $my->variable->name; ?>\r\n```\r\n\r\nYou can also set\r\n\r\n```xml\r\n    <var name=\"my.variable.name\" value=\"New Value!\" />\r\n```\r\n\r\nand you can use default values if the variable isn't set (Which does an automatic `!empty()` check)\r\n\r\n```xml\r\n    <var name=\"title\" default=\"My Website Title!\" />\r\n```\r\n\r\n**But this uses the official `<var>` tag, doesn't it?**\r\n\r\nYes it does, but it won't affect it in any way. VarElement only reacts if there is at least a `name` attribute existent (And there is no reason to set one on a normal `<var>` element).\r\nEverything else stays plain HTML.\r\n\r\n\r\n### Interpolation\r\n\r\nVariable interpolation works on attribute values and text nodes.\r\nSomething like `<{{var.name}}>` isn't possible and probably never will be.\r\n\r\n```xml\r\n    <nav class=\"nav nav-{{orientation}}\">\r\n    \r\n\t\tHey, this is some text and I don't want to use a tag now so I just {{output}} my variable named \"output\" here.\r\n\t\t\r\n    </nav>\r\n```\r\n\r\n**Note**: *If you think it makes sense using interpolation in `<php>` nodes, you can do it, but honestly, it makes no sense. You have access to the variables using plain `$varName` anyways.*\r\n\r\n\r\nAs for attributes, if the variable is the only thing you have in your attribute value and the variable is null or false, it won't render the attribute itself.\r\nThis is useful for optional classes\r\n\r\n```xml\r\n    <a href=\"my-link.html\" class=\"{{link.active}}\">My link!</a>\r\n```\r\n\r\nif `$link->active` is `null` or `false`, this will render\r\n\r\n```xml\r\n    <a href=\"my-link.html\">My link!</a>\r\n```\r\n\r\nActually, this was a lie, it doesn't do this right now, but it will soon.\r\n\r\nYou can also use default values and callbacks/filters in the expression-way of calling variables.\r\n\r\n```xml\r\n\t<p>\r\n\t\tHEY, THE NEXT TEXT SHOULD ALSO BE {{someText(I dont have a Text):strtoupper:SomeClass.doSomeStaticStuff}}\r\n\t</p>\r\n```\r\n\r\n\r\n## Loops\r\n\r\nThere is only one kind of loop right now:\r\n\r\nThe for-loop (Which is also a foreach loop)\r\nYou might think it works like a for-loop, but right now it's really **only** a foreach loop\r\n\r\n```xml\r\n    <for each=\"my.posts\" as=\"post\">\r\n\r\n        <article>\r\n            <header>\r\n                <h1>{{post.title}}</h1>\r\n            </header>\r\n            <p>\r\n                {{item.content}}\r\n            </p>\r\n        </article>\r\n    </for>\r\n```\r\n\r\nIt's almost the same syntax as MDV so if you already used MDV, you might be familiar with this.\r\n\r\n\r\n## Inline PHP\r\n\r\nYou can use PHP-HTML-Tags to use plain PHP inside your template.\r\nThrough the XML restrictions you have to put complex code into `<![CDATA[ ... ]]>` tags.\r\n\r\n```xml\r\n\t<php>echo $someVariable;</php>\r\n\t\r\n\t<php>while( $i < 10 ):</php>\r\n\t\t<span>{{i}}</span>\r\n\t\t<php>$++;</php>\r\n\t<php>endwhile;</php>\r\n\r\n\t<php><![CDATA[\r\n\t\r\n\t\t//Here you can use any kind of complex PHP code\r\n\t\t\r\n\t\tclass SomeClass {}\r\n\t\t\r\n\t\t$instance = new SomeClass;\r\n\t\t$instance->something = 'SomeValue';\r\n\t\t\r\n\t\tvar_dump( $instance );\r\n\t\r\n\t]]></php>\r\n```\r\n\r\n**More documentation following soon.**\r\n\r\n\r\n# What else can I do with it?\r\n\r\n\r\nYou can enhance it. XTPL includes a plugin system with some default extensions.\r\nBased on the tags you use you can add new tags and classes that handle them.\r\n\r\nYou might think it just translates XML to HTML, but it actually creates a complete DOM with a bunch of traversing and manipulation methods in the background. This allows you to manipulate any specific point of the DOM from every specific or any other point that gets handled.\r\nThe implementation does **not** use DOMDocument of PHP but an own DOM implementation (that at least uses similar naming) that works different and more efficient for this kind of project.\r\n\r\nAn example might be Bootstrap-Extensions, that allow you to use bootstrap elements easily (e.g. `<bs-btn type=\"success\">Success!!</bs-btn>`) and you don't even need to include any CSS or JS files by yourself, the elements can check if bootstrap is loaded or not by traversing the `<head>` element, if not, they can just `addChild()` a new `<script>` and `<link>` to it and it will be loaded when it's required. Actually, there is a method called `addCss( $css )` in it that already does that for you :)\r\n\r\nThe possibilities here are unlimited.\r\nIt works kind of like server-side HTML Custom Elements.\r\nWith enough plugins you don't need a line of plain PHP to get your dynamic website working with pure HTML syntax.\r\n\r\n\r\nTo add an element plugin, create a PHP Class that extends from `Xtpl\\Nodes\\Element`, call it anything with `Element` in the end, put it into some namespace and let the parser know about your element namespace with\r\n\r\n```php\r\n$xtpl->getCompiler()->getParser()->addElementNamespace( 'Your\\\\Element\\\\Namespace' );\r\n```\r\n\r\nThen just go on rendering normally.\r\n\r\nWhat will happen is that the parser will inflect the name of the HTML tag it processes and find a class that fits it.\r\ne.g. an element like `<my-custom-tag>` will search for a class called `MyCustomTagElement` in the element namespaces of the parser. The DOM will then receive a new instance of this class instead of a plain `Element`-instance and allows you to modify the compiling and rendering process of that element.\r\n\r\nIn your class you have a bunch of DOM utilities to make your elements as mighty as possible.\r\nJust take a look at the `Xtpl\\Extensions` or the `Xtpl\\Nodes` element namespaces to get a feeling for it.\r\n\r\n\r\n# Planned features\r\n\r\n- [ ] Less and CoffeeScript integration\r\n- [ ] If-statements\r\n- [ ] Medium-sized standard library\r\n- [ ] Twitter Bootstrap elements\r\n- [ ] Fancy filters (Markdown?)\r\n\r\n\r\n# How does the compilation work?\r\n\r\nYou can either let the XTPL Renderer handle all the work or you can get your hands dirty and do it with the raw API.\r\n\r\nThe most easy way:\r\n```php\r\n    $xtpl = new \\Xtpl\\Renderer;\r\n\r\n    $xtpl->displayFile( 'your/path/to/the/xtpl/file', array(\r\n    \t'title' => 'My Page Title',\r\n    \t'posts' => array(\r\n    \t\t0 => array(\r\n    \t\t\t'title' => 'Some post title',\r\n    \t\t\t'content' => 'bla bla bla bla bla'\r\n    \t\t)\r\n    \t)\r\n    ) );\r\n```\r\n\r\nIt doesn't matter if you use the xtpl Extension or not.\r\n\r\nUsing display like that will `eval()` the code, and as we all know, eval is evil.\r\nYou better give the renderer a caching directory as the first argument\r\n\r\n```php\r\n\t$xtpl = new \\Xtpl\\Renderer( __DIR__.'/cache' );\r\n```\r\n\r\nThis directory of course needs to be writable, but this will improve the performance of the system **greatly**.\r\n\r\nUsing this way, the renderer will handle all the caching on its own, you don't need to do a thing.\r\n\r\nIf you want to dig in the dirt you can also use the system in a more raw manner, like this:\r\n\r\n```php\r\n\t$xtpl = $xtpl->renderFileToFile( 'your/xtpl', './phtml/your/xtpl.phtml' );\r\n\textract( $yourTemplateArgs );\r\n\tinclude './phtml/your/xtpl.phtml';\r\n```\r\n\r\n\r\n**For anything else, just look the codes above.**\r\n\r\n\r\n# Why is it called XTPL?\r\n\r\n\r\nHonestly, because I didn't find any fancy, fitting name yet.\r\nMaybe it will always be XTPL, maybe I change it at some time, I don't know\r\n\r\nXTPL comes from XML and Template (TPL), which makes it XTPL. Nifty, I know.\r\n\r\nI'm open for name suggestions.\r\n\r\n\r\n# I have feedback, I'm interested, I want to contribute, I have a new name for this?\r\n\r\nPlease send an email to torben@devmonks.net and inform me.\r\n\r\nI'm looking forward to talk to interested people :)\r\n\r\n","google":"UA-38095399-3","note":"Don't delete this file! It's used internally to help with page regeneration."}