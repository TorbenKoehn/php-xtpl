{"name":"Php-xtpl","tagline":"A PHP Template System that uses HTML (or rather, XML) instead of a new template \"language\" you have to learn.","body":"# What is XTPL?\r\n\r\n\r\nXTPL is a **template system for PHP** that doesn't use any fancy, new syntax, but plain old HTML, or rather, XML.\r\n\r\n\r\n# How does it work?\r\n\r\nThe XTPL **Parser** parses the XTPL file and handles specific nodes, if found.\r\nThe node plugins are loaded dynamically, which means features like mapping a whole extension over your HTML code that handle new and existing HTML elements are easily possible.\r\n\r\nThe output you get is **PHTML** which you can include in PHP.\r\nPHTML is just **PHP with HTML**, which renders a dynamic, server-side processed HTML page.\r\n\r\nIf you don't want to handle the PHTML stuff by yourself, XTPL includes a Renderer that also caches for you, if you like.\r\n\r\n# How to install?\r\n\r\nYou can install either via downloading the [ZIP from GitHub](https://github.com/TorbenKoehn/php-xtpl/archive/master.zip) or by using [Composer](http://getcomposer.org/)\r\n\r\nTo install using composer, you need to add the following info in your `composer.json`\r\n\r\n```json\r\n{\r\n    \"minimum-stability\": \"dev\",\r\n    \"require\": {\r\n        \"php\": \">=5.3.0\",\r\n        \"torbenkoehn/php-xtpl\": \"*\"\r\n    }\r\n}\r\n\r\n```\r\n\r\nAfter that just run\r\n\r\n```bash\r\n$ composer install\r\n```\r\n\r\nto install the XTPL library and make it available for you to use.\r\n\r\n\r\n# How to use?\r\n\r\nYou can either let the XTPL Renderer handle all the work or you can get your hands dirty and do it with the raw API.\r\n\r\nThe most easy way:\r\n```php\r\n    $xtpl = new Xtpl\\Renderer;\r\n\r\n    $xtpl->displayFile( 'your/path/to/the/xtpl/file', array(\r\n        'title' => 'My Page Title',\r\n        'posts' => array(\r\n            0 => array(\r\n                'title' => 'Some post title',\r\n                'content' => 'bla bla bla bla bla'\r\n            )\r\n        )\r\n    ) );\r\n```\r\n\r\nIt doesn't matter if you use the `.xtpl`-Extension or not.\r\n\r\nUsing display like that will `eval()` the code, and as we all know, eval is evil.\r\nYou better give the renderer a caching directory as the first argument\r\n\r\n```php\r\n    $xtpl = new Xtpl\\Renderer( __DIR__.'/cache' );\r\n```\r\n\r\nThis directory of course needs to be writable, but this will improve the performance of the system **greatly**.\r\n\r\nUsing this way, the renderer will handle all the caching on its own, you don't need to do a thing.\r\n\r\nIf you want to dig in the dirt you can also use the system in a more raw manner, like this:\r\n\r\n```php\r\n    $xtpl = $xtpl->renderFileToFile( 'your/xtpl', './phtml/your/xtpl.phtml' );\r\n    extract( $yourTemplateArgs );\r\n    include './phtml/your/xtpl.phtml';\r\n```\r\n\r\n\r\n**Note:** *For anything else, just look the codes above and in the docs below.*\r\n\r\n\r\n# Basic Features\r\n\r\n## Blocks\r\n\r\nYou can define a block and let other blocks add or replace content in it.\r\nThis works recursively, this means that you can define blocks in a layout template, extend from that and just define the block contents.\r\nYou can also define blocks and then include the templates that specify the block content.\r\n\r\n**my-page.xtpl**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<xtpl>\r\n\r\n\t<html version=\"5\">\r\n\t    <head>\r\n\t        <title>XTPL is awesome!</title>\r\n\t\r\n\t        <block name=\"scripts\">\r\n\t            <script src=\"jquery.js\" />\r\n\t        </block>\r\n\t\r\n\t        <block name=\"styles\">\r\n\t            <link rel=\"stylesheet\" href=\"style.css\" />\r\n\t        </block>\r\n\t    </head>\r\n\t    <body>\r\n\t\r\n\t        <block name=\"content\">\r\n\t            I'm some placeholder content, I won't stay here.\r\n\t        </block>\r\n\t    </body>\r\n\t</html>\r\n\r\n\r\n\r\n\t<block name=\"scripts\" mode=\"append\">\r\n        <script src=\"bootstrap.js\" />\r\n    </block>\r\n\r\n    <block name=\"styles\" mode=\"prepend\">\r\n        <link rel=\"stylesheet\" href=\"bootstrap.css\" />\r\n    </block>\r\n\r\n    <block name=\"content\">\r\n\r\n        <h1>My current content</h1>\r\n        <p>\r\n            This might be some static or dynamic content, whatever you prefer.\r\n        </p>\r\n        \r\n        <p>\r\n        \tIt actually doesn't matter what's in here, you can include stuff, you can have sub-blocks and sub-sub-blocks, XTPL can handle all of it.\r\n        </p>\r\n\r\n    </block>\r\n\r\n</xtpl>\r\n```\r\n\r\n**Note**: *Indeed, you don't need to close script elements anymore.*\r\n\r\nThe resulting HTML will be this:\r\n\r\n```html\r\n<!doctype html>\r\n<html>\r\n    <head>\r\n        <title>XTPL is awesome!</title>\r\n\r\n        <script src=\"jquery.js\"></script>\r\n        <script src=\"bootstrap.js\"></script>\r\n\r\n        <link rel=\"stylesheet\" href=\"bootstrap.css\">\r\n        <link rel=\"stylesheet\" href=\"style.css\">\r\n    </head>\r\n    <body>\r\n\r\n        <h1>My current content</h1>\r\n        <p>\r\n            This might be some static or dynamic content, whatever you prefer.\r\n        </p>\r\n        \r\n        <p>\r\n        \tIt actually doesn't matter what's in here, you can include stuff, you can have sub-blocks and sub-sub-blocks, XTPL can handle all of it.\r\n        </p>\r\n\r\n    </body>\r\n</html>\r\n```\r\n\r\nNotice that the script block got appended, the style block got prepended and the content block replaced the previous content.\r\n\r\nThe target block is always the first block with its name that the parser finds, all other blocks will add to it (or not)\r\n\r\nPeople who played with Jade already should know this kind of template mechanism.\r\n\r\n\r\n## Extend\r\n\r\nTemplates can extend other templates. Again, if you're coming from Jade, you should already know the way it works.\r\nThis does nothing more than putting your current template DOM inside the extended template DOM, but allows for recursive block usage, global main-layouts and stuff like that.\r\n\r\nImagine you have a great main-layout\r\n\r\n**layout.xtpl**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<xtpl>\r\n\r\n\t<html version=\"5\">\r\n\t    <head>\r\n\t        <title>XTPL is awesome!</title>\r\n\t\r\n\t        <block name=\"scripts\">\r\n\t            <script src=\"jquery.js\" />\r\n\t        </block>\r\n\t\r\n\t        <block name=\"styles\">\r\n\t            <link rel=\"stylesheet\" href=\"style.css\" />\r\n\t        </block>\r\n\t    </head>\r\n\t    <body>\r\n\t\r\n\t        <block name=\"content\">\r\n\t            I'm some placeholder content, I won't stay here.\r\n\t        </block>\r\n\t    </body>\r\n\t</html>\r\n\r\n</xtpl>\r\n```\r\n\r\nand you render a template that extends it\r\n\r\n**my-page.xtpl**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<xtpl extends=\"layout\">\r\n\r\n    <block name=\"scripts\" mode=\"append\">\r\n        <script src=\"bootstrap.js\" />\r\n    </block>\r\n\r\n    <block name=\"styles\" mode=\"prepend\">\r\n        <link rel=\"stylesheet\" href=\"bootstrap.css\" />\r\n    </block>\r\n\r\n    <block name=\"content\">\r\n\r\n        <h1>My current content</h1>\r\n        <p>\r\n            This might be some static or dynamic content, whatever you prefer.\r\n        </p>\r\n        \r\n        <p>\r\n        \tIt actually doesn't matter what's in here, you can include stuff, you can have sub-blocks and sub-sub-blocks, XTPL can handle all of it.\r\n        </p>\r\n\r\n    </block>\r\n</xtpl>\r\n```\r\n\r\nThe resulting HTML will be this:\r\n\r\n```html\r\n<!doctype html>\r\n<html>\r\n    <head>\r\n        <title>XTPL is awesome!</title>\r\n\r\n        <script src=\"jquery.js\"></script>\r\n        <script src=\"bootstrap.js\"></script>\r\n\r\n        <link rel=\"stylesheet\" href=\"bootstrap.css\">\r\n        <link rel=\"stylesheet\" href=\"style.css\">\r\n    </head>\r\n    <body>\r\n\r\n        <h1>My current content</h1>\r\n        <p>\r\n            This might be some static or dynamic content, whatever you prefer.\r\n        </p>\r\n        \r\n        <p>\r\n        \tIt actually doesn't matter what's in here, you can include stuff, you can have sub-blocks and sub-sub-blocks, XTPL can handle all of it.\r\n        </p>\r\n\r\n    </body>\r\n</html>\r\n```\r\n\r\nThere actually is no programatic limitation on how many levels you can extend, how many blocks there are or anything like that.\r\nYou can extend layouts as many levels deep as you like, even in included XTPLs.\r\n\r\nJust try to avoid recursion\r\n\r\n**Note**: *No really, recursion will fuck everything up right now I guess.*\r\n\r\n## Includes\r\n\r\nInclude a sub-template. \r\nIn the sub-template you got access to the template variables as well as the attributes of the include-element.\r\n\r\n**my-page.xtpl**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<xtpl>\r\n\r\n    <body>\r\n\r\n\t\t<block name=\"page-header\" />\r\n        <header>\r\n\r\n            <include file=\"navigation\" orientation=\"vertical\" />\r\n            \r\n        </header>\r\n    </body>\r\n    \r\n</xtpl>\r\n```\r\n\r\n**navigaton.xtpl**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<xtpl>\r\n\r\n    <nav class=\"nav nav-[[orientation]]\">\r\n        <ul>\r\n            <li><a href=\"#home\">Home</a></li>\r\n            <li><a href=\"#about-me\">About me</a></li>\r\n            <li><a href=\"#blog\">Blog</a></li>\r\n            <li><a href=\"#portfolio\">Portfolio</a></li>\r\n        </ul>\r\n    </nav>\r\n    \r\n    <block name=\"page-header\">\r\n    \tMy Page Header\r\n    </block>\r\n    \r\n</xtpl>\r\n```\r\n\r\nTo use the `orientation` attribute in the included template (or any of its extended templates), you use `[[orientation]]` in any attribute or text node, take a look at the `class=\"\"` attribute of the `<nav>` element. This also works on templates, that the included template extended.\r\n`orientation` is just an example, you can use any attribute name or value you like (You could even load the value of the `file` attribute)\r\n\r\nThe interpolation with `[[attributeName]]` works on attribute values and plain text nodes.\r\n\r\n\r\n## Variables\r\n\r\nWhat else, one of the most important parts.\r\nThere are two ways to use variables inside templates, there is a `<var>` element and you can use interpolation.\r\n\r\n### The `<var>` element\r\n\r\n```xml\r\n    <var name=\"my.variable.name\" />\r\n```\r\n\r\nis the same as\r\n\r\n```php\r\n    <?php echo $my->variable->name; ?>\r\n```\r\n\r\nYou can also set\r\n\r\n```xml\r\n    <var name=\"my.variable.name\" value=\"New Value!\" />\r\n```\r\n\r\nand you can use default values if the variable isn't set (Which does an automatic `!empty()` check)\r\n\r\n```xml\r\n    <var name=\"title\" default=\"My Website Title!\" />\r\n```\r\n\r\n**But this uses the official `<var>` tag, doesn't it?**\r\n\r\nYes it does, but it won't affect it in any way. VarElement only reacts if there is at least a `name` attribute existent (And there is no reason to set one on a normal `<var>` element).\r\nEverything else stays plain HTML.\r\n\r\n\r\n### Interpolation\r\n\r\nVariable interpolation works on attribute values and text nodes.\r\nSomething like `<{{var.name}}>` isn't possible and probably never will be.\r\n\r\n```xml\r\n    <nav class=\"nav nav-{{orientation}}\">\r\n    \r\n\t\tHey, this is some text and I don't want to use a tag now so I just {{output}} my variable named \"output\" here.\r\n\t\t\r\n    </nav>\r\n```\r\n\r\n**Note**: *If you think it makes sense using interpolation in `<php>` nodes, you can do it, but honestly, it makes no sense. You have access to the variables using plain `$varName` anyways. Even though, in some cases it may make sense, so it works.*\r\n\r\n\r\nAs for attributes, if the variable is the only thing you have in your attribute value and the variable is null or false, it won't render the attribute itself.\r\nThis is useful for optional classes\r\n\r\n```xml\r\n    <a href=\"my-link.html\" class=\"{{link.active}}\">My link!</a>\r\n```\r\n\r\nif `$link->active` is `null` or `false`, this will render\r\n\r\n```xml\r\n    <a href=\"my-link.html\">My link!</a>\r\n```\r\n\r\nActually, this was a lie, it doesn't do this right now, but it will soon.\r\n\r\nYou can also use default values and callbacks/filters in the expression-way of calling variables.\r\n\r\n```xml\r\n\t<p>\r\n\t\tHEY, THE NEXT TEXT SHOULD ALSO BE {{someText(I dont have a Text):strtoupper:SomeClass.doSomeStaticStuff}}\r\n\t</p>\r\n```\r\n\r\n\r\n## Loops\r\n\r\nThere are for and foreach-loops right now. Both work with the `<for>` element.\r\n\r\nA simple foreach-loop works like this:\r\n\r\n```xml\r\n    <for each=\"my.posts\" as=\"post\">\r\n\r\n        <article>\r\n            <header>\r\n                <h1>{{post.title}}</h1>\r\n            </header>\r\n            <p>\r\n                {{item.content}}\r\n            </p>\r\n        </article>\r\n    </for>\r\n```\r\n\r\nYou might also get the key as a variable with\r\n\r\n```xml\r\n<for each=\"my.posts\" as=\"post\" key=\"currentIndex\">\r\n```\r\n\r\n\r\nThe for loops is just a counter currently, you can do something for a limited amount of times and specify a start-point.\r\nThis is pretty useless right now, since you can't use interpolation for the `times` attribute, but this will surely be changed in the future.\r\n\r\nA for-loop works like this:\r\n\r\n```xml\r\n<for times=\"5\" as=\"i\">\r\n    ({{i}}): Hey, this should happen 5 times! \r\n</for>\r\n```\r\n\r\n## Conditions\r\n\r\nYes, they are in now!\r\nXTPL supports `<if>`, `<else>` and `<elseif>` blocks.\r\nThe latter two always need to be **inside** the `if` element they refer to.\r\n\r\nPossible checks via attribute are `empty`, `not-empty`, `set`, `not-set`, `cond` and `not-cond`\r\n\r\n`cond` and `not-cond` just translate into plain PHP, it's like defining what's between the `(...)` of the if statement in PHP.\r\n\r\n\r\n```xml\r\n<if not-empty=\"myVar\">\r\n    Heeey, we made sure that {{myVar}} is not empty!\r\n</if>\r\n```\r\n\r\n```xml\r\n<if cond=\"!empty( $myVar ) and $myVar > 0\">\r\n    This gets printed if the condition is true\r\n</if>\r\n```\r\n\r\n```xml\r\n<if not-set=\"myVar\">\r\n    myVar is not set\r\n    <else>\r\n        myVar is set!\r\n    </else>\r\n</if>\r\n```\r\n\r\nIt doesn't matter where in the node you put the else/else-if tags, they will always be rendered at the end automatically.\r\nThis is useful if you want to put your else-block at the top of a large if-block to improve readability.\r\n```xml\r\n<if not-set=\"myVar\">\r\n    myVar is not set\r\n    <else>\r\n        myVar is set!\r\n    </else>\r\n    and here is some more content<br>\r\n    but this will only be rendered, if the if-block is true!\r\n</if>\r\n```\r\n\r\n```xml\r\n<if not-set=\"myVar\">\r\n    myVar is not set\r\n    <elseif set=\"myVar\">\r\n        myVar is set\r\n    </elseif>\r\n    <else>\r\n        This won't ever be printed.\r\n    </else>\r\n</if>\r\n```\r\n\r\nPlay with it, get a feeling for it, it actually works!\r\n\r\n\r\n## Inline PHP\r\n\r\nYou can use PHP-HTML-Tags to use plain PHP inside your template.\r\nThrough the XML restrictions you have to put complex code into `<![CDATA[ ... ]]>` tags.\r\n\r\n```xml\r\n\t<php>echo $someVariable;</php>\r\n\t\r\n\t<php>while( $i < 10 ):</php>\r\n\t\t<span>{{i}}</span>\r\n\t\t<php>$++;</php>\r\n\t<php>endwhile;</php>\r\n\r\n\t<php><![CDATA[\r\n\t\r\n\t\t//Here you can use any kind of complex PHP code\r\n\t\t\r\n\t\tclass SomeClass {}\r\n\t\t\r\n\t\t$instance = new SomeClass;\r\n\t\t$instance->something = 'SomeValue';\r\n\t\t\r\n\t\tvar_dump( $instance );\r\n\t\r\n\t]]></php>\r\n```\r\n\r\n## Processing Instructions\r\n\r\nYou've already seen you can do inline PHP with a tag.\r\nActually, you can also just use the `<?php ... ?>` syntax in any XTPL file.\r\nThese are handled as **processing instructions** and are directly converted into elements.\r\n\r\nThe following processing instructions are available right now:\r\n\r\n`<?php [your php code ] ?>`\r\nRenders into a `<php>` element, which renders a real PHP block in the PHTML file.\r\n\r\n`<?css [your CSS] ?>`\r\nRenders into a valid `<style>` element\r\n\r\n`<?js [your JavaScript] ?>`\r\nRenders into a valid `<script>` element\r\n\r\n\r\n## Extensions\r\n\r\nXTPL can be extended in a really easy way.\r\n\r\nThe parser takes specific namespaces where it gets its nodes from.\r\nYou can add any namespace you like to provde new or existing, reworked elements to the parser.\r\n\r\nImagine you use a `<my-custom-tag>` tag inside your XTPL file.\r\n\r\nThe parser goes and looks for a `My\\Custom\\TagElement` class inside one of its extension namespaces\r\nIf found, it processes it and renders it as a valid XTPL Node.\r\n\r\nSince newly added namespaces always get read first, it's easy to remove complete element namespaces this way.\r\nThe Bootstrap Extension you read about in the next chapter will give a good example to that.\r\n\r\nThe default namespaces are the following\r\n\r\n`Xtpl\\Nodes`\r\n`Xtpl\\Extensions`\r\n\r\nTo include a new namespace, you can either call\r\n`$renderer->addExtension( 'Your\\\\Extension\\\\Namespace' );` on the `Xtpl\\Renderer`\r\nor\r\n`$parser->addElementNamespace( 'Your\\\\Extension\\\\Namespace' );` on the `Xtpl\\Parser`\r\n\r\nTo enable a XTPL Extension, you call\r\n`$renderer->addXtplExtension( 'ExtensionName' )` on the `Xtpl\\Renderer`\r\nor\r\n`$parser->addElementNamespace( 'Xtpl\\\\Extensions\\\\ExtensionName' );` on the `Xtpl\\Parser`\r\n\r\nUsually you should be working with the `Xtpl\\Renderer`, just so you know.\r\n\r\n\r\n## Default Extensions\r\n\r\nWhile surely you can develop extensions by yourself easily, you don't have to.\r\nXTPL actually brings a whole set of new elements into HTML.\r\n\r\nYou can either activate them by calling them by their complete namespace or you can include a single namespace to map them over your existing HTML.\r\n\r\n\r\n### Single Extensions (`Xtpl\\Extensions`)\r\n\r\nSingle Extensions are simple, single elements that just provide some utility features.\r\n\r\n#### Email\r\n\r\nThe tag `<email>someone@example.com</email>` will be converted into `<a href=\"mailto:someone@example.com\">someone@example.com</a>`\r\n\r\n#### Html\r\n\r\nThe `<html>` tag has a new attribute called `version`.\r\nRight now it only supports the value `5`, which makes it automatically add\r\n`<!doctype html>` in front of your `<html>`-tag.\r\n\r\n#### Head\r\n\r\nThe `<head>` Extension actually just adds the UTF-8 charset by default, if you didn't add one manually.\r\n\r\n#### Br\r\n\r\nThe `<br>`-tag provides a new attribute `repeat`, that does exactly what you think it does.\r\n`<br repeat=\"5\" />` will render to `<br><br><br><br><br>`\r\n\r\nThis is useful for layouts more often than one might think.\r\n\r\n\r\n### The Bootstrap Extension (`Xtpl\\Extensions\\Bootstrap`)\r\n\r\nThe Bootstrap Extension is a full set of new HTML elements that provide the whole functionality of Twitter's Bootstrap framework with the easiest markup you've ever seen.\r\n\r\n**Note:** *You don't have to load bootstrap by yourself! XTPl actually takes care of that and handles script and CSS requirements for bootstrap automatically. This means, you also got jQuery once you have one bootstrap element in your code. Watch the generated DOM!*\r\n\r\nThere are two ways to use the bootstrap-extension.\r\n\r\n#### Direct Calling\r\n\r\nYou can directly call bootstrap extensions by using their namespace. Remember, the `Xtpl\\Extensions` namespace is always loaded.\r\nWith `<bootstrap-button theme=\"primary\">My shiny button!</bootstrap-button>` you get a fully working Bootstrap-Button that automatically handles anything you do with it.\r\n\r\n#### Extension Mapping\r\n\r\nIf you use Bootstrap for your whole project anyways, you can also just map the whole extension namespace over your XTPL file.\r\nYou can do this by enabling the Bootstrap Extension.\r\nJust call `$renderer->addXtplExtension( 'Bootstrap' );` on your `Xtpl\\Renderer`\r\n\r\nThe Bootstrap Extension brings **78 new elements** into your XTPL templates.\r\nTo see what they can you, you should better check out the following XTPL Templates\r\n\r\n[https://github.com/TorbenKoehn/php-xtpl/tree/master/templates/bootstrap-extension](Bootstrap Extension Example Templates)\r\n\r\n## Develop your own extensions\r\n\r\nThere actually is no documentation on how extension elements work right now.\r\nYou may just look at the existing Bootstrap-Extension to get a full view of how they are made.\r\n\r\n[Boostrap Extension PHP Files](https://github.com/TorbenKoehn/php-xtpl/tree/master/library/Xtpl/Extensions/Bootstrap)\r\n\r\n# Planned features and fixes\r\n\r\n- Less and CoffeeScript integration\r\n- Markdown Integration\r\n- More dynamic processing instructions\r\n- Improved DOM management in Nodes\r\n- Improved interpolation on fixed value attributes (e.g. `<boostrap-button theme=\"{{theme}}\" />` doesn't work right now)\r\n- Twitter Bootstrap Collapse (Accordion), Carousel and Affix\r\n- More Doc-Types\r\n- More intelligent encoding detection and auto-generation\r\n- More intelligent and nifty single extension elements\r\n\r\n\r\n\r\n\r\n\r\n# Why is it called XTPL?\r\n\r\n\r\nHonestly, because I didn't find any fancy, fitting name yet.\r\nMaybe it will always be XTPL, maybe I change it at some time, I don't know\r\n\r\nXTPL comes from XML and Template (TPL), which makes it XTPL. Nifty, I know.\r\n\r\nI'm open for name suggestions.\r\n\r\n\r\n# I have feedback, I'm interested, I want to contribute, I have a new name for this?\r\n\r\nPlease send an email to torben@devmonks.net and inform me.\r\n\r\nI'm looking forward to talk to interested people :)\r\n\r\n\r\n","google":"UA-38095399-3","note":"Don't delete this file! It's used internally to help with page regeneration."}